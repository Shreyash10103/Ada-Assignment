//4a.

def sort_stack(stack):
    if len(stack) <= 1:
        return stack

    top = stack.pop()
    sorted_stack = sort_stack(stack)

    if top >= sorted_stack[-1]:
        sorted_stack.append(top)
    else:
        temp = sorted_stack.pop()
        sorted_stack = sort_stack(stack+[top])
        sorted_stack.append(temp)

    return sorted_stack


# Example usage
stack = [5, 1, 2, 6, 4]
sorted_stack = sort_stack(stack)
print(sorted_stack)

# output
# [6, 5, 4, 2, 1]


//4b.

def is_match(text, pattern):
    # Base case: if both text and pattern are empty, then it's a match
    if not text and not pattern:
        return True

    # Recursive cases
    if pattern and pattern[0] == '*':
        # Case 1: matching zero preceding character of '*'
        if is_match(text, pattern[1:]):
            return True
        # Case 2: matching one or more preceding character of '*'
        i = 0
        while i < len(text) and (pattern[1] == '.' or text[i] == pattern[1]):
            if is_match(text[i+1:], pattern[2:]):
                return True
            i += 1
    elif text and pattern and (pattern[0] == '.' or text[0] == pattern[0]):
        # Case 3: matching a single character from lowercase alphabetic characters
        if is_match(text[1:], pattern[1:]):
            return True

    # All recursive cases failed, so it's not a match
    return False
    
    
    //Assignment 5
    
    def sortedSquares(A):
    n = len(A)
    res = [0] * n
    left, right = 0, n-1
    i = n-1
    while left <= right:
        if abs(A[left]) > abs(A[right]):
            res[i] = A[left] ** 2
            left += 1
        else:
            res[i] = A[right] ** 2
            right -= 1
        i -= 1
    return res[::-1]


# Test Case 1
A = [-6, -3, -1, 2, 4, 5]
print(sortedSquares(A))  # Output: [1, 4, 9, 16, 25, 36]

# Test Case 2
A = [-5, -4, -2, 0, 1]
print(sortedSquares(A))  # Output: [0, 1, 4, 16, 25]


// Assignment 6a.

def find_element(matrix, target):
    rows = len(matrix)
    cols = len(matrix[0])
    row = 0
    col = cols - 1
    while row < rows and col >= 0:
        if matrix[row][col] == target:
            print(f"Element {target} is found at position ({row}, {col})")
            row += 1
            col -= 1
        elif matrix[row][col] > target:
            col -= 1
        else:
            row += 1


matrix = [[-4, -3, -1, 3, 5],
          [-3, -2, 2, 4, 6],
          [-1, 1, 3, 5, 8],
          [3, 4, 7, 8, 9]]

find_element(matrix, 3)

# Element 3 is found at position (0, 3)
# Element 3 is found at position (2,2)
# Element 3 is found at position (3, 0)


// Assignment 6b.

import numpy as np


def split(matrix):
    row, col = matrix.shape
    row2, col2 = row//2, col//2
    return matrix[:row2, :col2], matrix[:row2, col2:], matrix[row2:, :col2], matrix[row2:, col2:]


def strassen(x, y):

    # Base case when size of matrices is 1x1
    if len(x) == 1:
        return x * y

    # Splitting the matrices into quadrants. This will be done recursively
    # until the base case is reached.
    a, b, c, d = split(x)
    e, f, g, h = split(y)

    # Computing the 7 products, recursively (p1, p2...p7)
    p1 = strassen(a, f - h)
    p2 = strassen(a + b, h)
    p3 = strassen(c + d, e)
    p4 = strassen(d, g - e)
    p5 = strassen(a + d, e + h)
    p6 = strassen(b - d, g + h)
    p7 = strassen(a - c, e + f)

    # Computing the values of the 4 quadrants of the final matrix c
    c11 = p5 + p4 - p2 + p6
    c12 = p1 + p2
    c21 = p3 + p4
    c22 = p1 + p5 - p3 - p7

    # Combining the 4 quadrants into a single matrix by stacking horizontally and vertically.
    c = np.vstack((np.hstack((c11, c12)), np.hstack((c21, c22))))

    return 
    
    
